import type { Deck } from '../types/deck';
import { DeckCategory } from '../types/deck';

/**
 * Í∏∞Î≥∏ Î¨¥Î£å Îç± Îç∞Ïù¥ÌÑ∞
 * Ïã§Ï†ú ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑúÎäî Ïù¥ÎØ∏ÏßÄÎ•º assets Ìè¥ÎçîÏóê ÎÑ£Í±∞ÎÇò Ïô∏Î∂Ä URL ÏÇ¨Ïö©
 */

// ÏûÑÏãúÎ°ú Ïù¥Î™®ÏßÄÎ•º ÏÇ¨Ïö©Ìï©ÎãàÎã§
const EMOJI_ANIMALS = ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üêî', 'üêß', 'üê¶'];
const EMOJI_FOOD = ['üçé', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'ü•ë', 'ü•ï', 'üåΩ', 'ü•¶'];
const EMOJI_FACES = ['üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò', 'ü•∞', 'üòó', 'üòô', 'üòö'];

/**
 * Ïù¥Î™®ÏßÄÎ•º data URL Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÌôò
 */
function emojiToDataUrl(emoji: string): string {
  const canvas = document.createElement('canvas');
  canvas.width = 128;
  canvas.height = 128;
  const ctx = canvas.getContext('2d');

  if (ctx) {
    ctx.font = '100px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(emoji, 64, 64);
  }

  return canvas.toDataURL();
}

/**
 * Í∏∞Î≥∏ Îç± Î™©Î°ù
 */
export const DEFAULT_DECKS: Deck[] = [
  {
    id: 'deck-animals',
    name: 'ÎèôÎ¨º ÏπúÍµ¨Îì§',
    description: 'Í∑ÄÏó¨Ïö¥ ÎèôÎ¨º ÏπúÍµ¨Îì§Í≥º Ìï®Íªò Ï¶êÍ∏∞Îäî Ïπ¥Îìú Í≤åÏûÑ',
    category: DeckCategory.ANIMALS,
    thumbnailUrl: emojiToDataUrl('üê∂'),
    images: EMOJI_ANIMALS.map(emojiToDataUrl),
    price: 0,
    isPremium: false,
    isOwned: true,
    createdAt: new Date().toISOString(),
  },
  {
    id: 'deck-food',
    name: 'ÎßõÏûàÎäî Í≥ºÏùº',
    description: 'Ïã†ÏÑ†ÌïòÍ≥† ÎßõÏûàÎäî Í≥ºÏùºÎì§',
    category: DeckCategory.FOOD,
    thumbnailUrl: emojiToDataUrl('üçé'),
    images: EMOJI_FOOD.map(emojiToDataUrl),
    price: 0,
    isPremium: false,
    isOwned: true,
    createdAt: new Date().toISOString(),
  },
  {
    id: 'deck-emoji',
    name: 'ÌëúÏ†ï Ïù¥Î™®ÏßÄ',
    description: 'Îã§ÏñëÌïú ÌëúÏ†ïÏùò Ïù¥Î™®ÏßÄÎì§',
    category: DeckCategory.EMOJI,
    thumbnailUrl: emojiToDataUrl('üòÄ'),
    images: EMOJI_FACES.map(emojiToDataUrl),
    price: 0,
    isPremium: false,
    isOwned: true,
    createdAt: new Date().toISOString(),
  },
];

/**
 * Îç± IDÎ°ú Îç± Í∞ÄÏ†∏Ïò§Í∏∞ (Í∏∞Î≥∏ Îç± + Ïª§Ïä§ÌÖÄ Îç±)
 */
export function getDeckById(deckId: string): Deck | undefined {
  // Î®ºÏ†Ä Í∏∞Î≥∏ Îç±ÏóêÏÑú Ï∞æÍ∏∞
  const defaultDeck = DEFAULT_DECKS.find((deck) => deck.id === deckId);
  if (defaultDeck) return defaultDeck;

  // Ïª§Ïä§ÌÖÄ Îç±ÏóêÏÑú Ï∞æÍ∏∞
  if (typeof window !== 'undefined') {
    try {
      const customDecksData = localStorage.getItem('card-memory-game-custom-decks');
      if (customDecksData) {
        const customDecks = JSON.parse(customDecksData) as Deck[];
        return customDecks.find((deck) => deck.id === deckId);
      }
    } catch (error) {
      console.error('Failed to load custom deck:', error);
    }
  }

  return undefined;
}

/**
 * ÏÜåÏú†Ìïú Îç±Îßå Í∞ÄÏ†∏Ïò§Í∏∞ (Í∏∞Î≥∏ Îç± + Ïª§Ïä§ÌÖÄ Îç±)
 */
export function getOwnedDecks(): Deck[] {
  const ownedDecks = DEFAULT_DECKS.filter((deck) => deck.isOwned);

  // Ïª§Ïä§ÌÖÄ Îç± Ï∂îÍ∞Ä
  if (typeof window !== 'undefined') {
    try {
      const customDecksData = localStorage.getItem('card-memory-game-custom-decks');
      if (customDecksData) {
        const customDecks = JSON.parse(customDecksData) as Deck[];
        return [...ownedDecks, ...customDecks];
      }
    } catch (error) {
      console.error('Failed to load custom decks:', error);
    }
  }

  return ownedDecks;
}
